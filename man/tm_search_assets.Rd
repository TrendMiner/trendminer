% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/search_assets.R
\name{tm_search_assets}
\alias{tm_search_assets}
\title{General search function on assets and tags}
\usage{
tm_search_assets(token, query, ...)
}
\arguments{
\item{token}{A valid access token}

\item{query}{Search query}

\item{...}{Additional arguments passed on to the underlying HTTP method.
This might be necessary if you need to set some curl options explicitly
via \code{\link[httr]{config}}.}
}
\value{
A list with search results. Each list entry represents one page of
the paginated response.
}
\description{
Search for assets and tags in the asset hierarchy that match the query pattern.
}
\details{
\code{tm_search_assets()} allows to search for nodes in the TrendMiner asset hierachy
with arbitrary queries. A node either represents an asset (component of the installation)
or a tag (property of an asset containing timeseries data). \code{tm_search_assets()} is
powering a couple of other functions under-the-hood like, e.g., \code{tm_get_assets()} and
\code{tm_get_tags()} which offer a higher abstraction level by using pre-defined search queries.

Depending on the query, TrendMiner search results might be paginated.
\code{tm_search_assets()} manages pagination completely on its own by combining all
paginated search results in a list before returning them.
\subsection{Available query operators}{
\itemize{
\item Search operators: equal(==), not equal(!=), in(=in=), not in(=out=)\cr
\item Logical operator: AND(;), OR(,)\cr
\item Wildcard operator: *
}
}

\subsection{List of attributes you can search on}{

id\cr
sourceId\cr
type\cr
externalId\cr
template\cr
templateId\cr
name\cr
description\cr
dataType\cr
data\cr
options\cr
deleted
}
}
\examples{
 \dontrun{
   # Retrieve all assets that have "Reactor" in their name
   tm_search_assets(token, 'type=="ASSET";name=="*Reactor*"')

   # Retrieve all tags that have "Temperature" in their name
   tm_search_assets(token, "type=='ATTRIBUTE';name=='*Temperature*'")
 }
}
