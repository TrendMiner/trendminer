% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/search_assets.R
\name{tm_search_assets}
\alias{tm_search_assets}
\title{Search on assets and tags}
\usage{
tm_search_assets(token, query, ...)
}
\arguments{
\item{token}{A valid access token}

\item{query}{Search query}

\item{...}{Additional arguments passed on to the underlying HTTP method.
This might be necessary if you need to set some curl options explicitly
via \code{\link[httr]{config}}.}
}
\value{
A data frame with search results. Each row represents one asset/tag which
matched the query pattern. The column names of the data frame returned
correspond to the search properties listed in \strong{Details}. The only exception
from this pattern are the \code{Ã¬d} search property which will be represented
by the \code{nodeId} column and the \code{data} search property which will be represented
by the \code{tagName} column. Data frames containing only asset but no tag
search results won't include the \code{dataType} and \code{tagName} columns.
}
\description{
Search for assets and tags in the asset framework that match the query pattern.
}
\details{
\code{tm_search_assets()} allows to search for nodes in the TrendMiner asset framework
with arbitrary queries. A node either represents an asset (component of the plant)
or a tag (attribute of an asset storing timeseries data). \code{tm_search_assets()} is
powering a couple of other functions under-the-hood like, e.g., \code{tm_assets()} and
\code{tm_tags()} which offer a higher abstraction level by using pre-defined search queries.
\subsection{Available query operators}{
\itemize{
\item Search operators: equal(==), not equal(!=), in(=in=), not in(=out=)\cr
\item Logical operator: AND(;), OR(,)\cr
\item Wildcard operator: *
}
}

\subsection{List of node properties you can search on}{
\itemize{
\item \code{id} Node id (in UUID format)\cr
\item \code{sourceId}\cr
\item \code{type} Type of the node. Either "ASSET" or "ATTRIBUTE" whereas the later refers to a tag\cr
\item \code{externalId}\cr
\item \code{template}\cr
\item \code{templateId}\cr
\item \code{name} Name of the node\cr
\item \code{description} Description of the node\cr
\item \code{options}\cr
\item \code{deleted} Boolean value. Either "TRUE" or "FALSE"
\item \code{dataType} Only available for nodes of type "ATTRIBUTE"\cr
\item \code{data} Tag name. Only available for nodes of type "ATTRIBUTE"\cr
}
}
}
\examples{
\dontrun{
token <- tm_token()

# Retrieve all assets that have "Reactor" in their name
tm_search_assets(token, 'type=="ASSET";name=="*Reactor*"')

# Retrieve all tags whose name starts with "Temperature"
tm_search_assets(token, "type=='ATTRIBUTE';name=='Temperature*'")
}
}
